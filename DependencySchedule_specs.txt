Project 7: Partial Ordering, dependant graph, and scheduling problem.

Given a directed acyclic (dependency) graph, G = <N, E>,
the task is to construct a schedule table based on the given dependency
of nodes (jobs) in the grapah.

In the class, you learn there are four cases in the scheduling:
(1)using limited processor where each job takes only 1 unit of time;
(2)using unlimited processor where each job takes only 1 unit of time;
(3)using limited processor where jobs take variable unit of times;
(4)using unlimited processor where jobs take variable unit of times.

In this project we will combine these four cases into one project.  
That is, your project will be able to handle all these four cases! 

**************************************
Language: C++ and Java
Due date:  C++ soft copy:  5/10/2015 Sunday before Midnight
Due date:  Java soft copy: 5/11/2015 Monday before midnight
Due date:  C++ hard copy:  5/12/2015 Tuesday in class
Due date:  Java hard copy: 5/12/2015 Tuesday in class

*******************************
I. input/output specificaions:
*******************************
A. Input(1): a text file representing the dependency (acyclic) graph, G=<N, E>.
		The first number in the input file is 
		the number of nodes in the graph; 
	     then follows by a list of dependency pairs <ni, nj>.
		
	for example:
    		6		// there are 6 nodes in the input graph
     		1  2 	// 1 must be done before 2
    		1  4 	// 1 must be done before 4
    		4  3 	// 4 must be done before 3
		4  2 // 4 must be done before 2
			:
			:
     Input(2): a text file contains the time requirements for jobs.
		The first number in the input file is 
		the number of nodes in the graph; 
	     then follows by a list of pairs, <ni, ti>, where
		ni is the node id and ti is the unit of times require by ni.

     Input(3): number of processors 

B. Output: The scheule table, nicely formatted.
		 Run the program three times,
	      with number of processors == 3,
	      with number of processors == 5,
    		 with number of processors == 20,

                   
****> The names of the input files and output, 
      and the number of processors should be in argv
     

*******************************
II. Data structure:
*******************************
	(1) scheduleTable, a 2-D array, (need to be dynamically allocated) 
		to record the schedule. The dimension should be determined at run time.
	  		(numberNodes by totalJobTimes)

	(2) OPEN, a linked list, to store jobs that do not have any parents.
		The nodes in the OPEN linked list will have two fields:
                - jobId (integer) // the node Id.
                - time (integer) // the time requiremant for node jobId.
               
	(3) hashTable[i], a hash table to represent the input dependency graph
		- hashTable needs to be dynamically allocated at run time. 
		- The size of the hash table is the total number of distinct nodes in the graph
		- The hashTable is an array of pointers (C++)/reference object (Java). 
           - Each hashTable[i] is pointed to a linked list, serves as listHead,
                  initially should points to a dummy node (the hashTable contructor's job) 
     		- The nodes in the linked list of hashTable will have two fields:
                - jobId (integer)
                - next (node pointer/reference)

      (4) processJob, an 1-D array to keep track of which job is being processed by processor[i].
		intialize to 0.

      (5) ProcessTime, an 1-D array to keep track of the time remain on the job for processor[i].
                (less or equal to 0  means the processor is available)
		intialize to 0.     
 
      (6) parentCount, an 1-D array to keep track of number of parents of each job
                (0 means no parent)
		intialize to 0, then incrementing during the loading of input (1)
		
      (7) jobTime, an 1-D array to store the time requirement for jobs.
        	geting from input (1)

      (8) jobDone, an 1-D array to keep track what jobs remain in the graph
                (1 means deleted from the graph, 0 means still in the graph)
		intialize to 0.     

      (9) jobMarked, an 1-D array to keep track what jobs are currently on processors.
                (1 means on processor, 0 means not)
           intialize to 0.     
               
**************************************************************
III. Algorithm steps for dependency job scheduling 
		(Report any error in the algorithm steps below for extra credits!!!!)
**************************************************************

step 0: prepare everyhing
	   - numberNodes <-- get from input (1)
	   - totalJobTime <-- the sum of all jobs, obtain from input (2)
	   - ProcNeed <-- get from input (3)
	   - if (procNeeds > numberNodes)
		 	procNeeds <-- numberNodes

	   - dynamically allocate accordingly and initallizing all arrays.
	   - print all three inputs to the output file
	   - ProcUsed <-- 0
  	   - Time <-- 0

step 1: 1.1: orphenNode <-- find an unmarked node on the dependancy 
				graph that does not have any parent 
		(ie., check parentCount[i] == 0 and jobMarked[i] == 0)
	   1.2: mark orphenNode (i.e., update jobMarked)
	   1.3: put orphenNode onto OPEN list
	   1.4: repeat step 1.1 to 1.3 until all jobs are checked.

step 2:  ProcUsed ++
	    if ProcUsed <= ProcNeed
		   	newJob <-- remove from OPEN 
			availProc <-- the next available processor (looking
             	into processjob[i] <= 0)
		
			place newJob on the processJob[availProc], 
             	place newJob's time on processTime[availProc]
             	update scheduleTable on the availProc row,
                (with respect to TIME status and job's time requiements).

step 3: repeat 2 until OPEN is empty or ProcUsed > ProcNeed

step 4: if OPEN list is empty and D.G is not empty
        		report error and exit (there is  cycle in the graph)

step 5: print to the *console* the scheduling table, 
		TIME, ProcUsed, and all 1-D arrays with proper heading. 
	  // for debugging

step 6: Time++

step 7: Decrease all processTime[i] by 1 

step 8: job <-- find a job that is done, ie., processTIME [i] == 0 ;
        delete the job from the processJob[i] (update processJob[i])
        delete the job from the graph (update jobDone[job])
        delete all it's outgoing arcs 
		(decrease by 1, the paraentCount[job] of its dependents)
        jobDone[job] <-- 1
        
step 9: repeat 8 until no more finished job

step 10: print to the *console* the scheduling table, 
		TIME, ProcUsed, and all 1-D arrays with proper heading. 
	  // for debugging


step 11: repeat step 1 to step 10 until the graph is empty 
		(looking into the 1-D array of jobs'status)

step 12: print final scheduleTable to the output file.


